@page "/register"
@using Authorization
@using Model
@using Data
@using System.ComponentModel.DataAnnotations

@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Register</h1>
<AuthorizeView>
    <NotAuthorized>

        <div class="col-xs-4">
            <div class="form-group">
                <label>First name:</label>
                <input class="form-control" type="text" placeholder="first name" @bind-value="firstName" />
            </div>
            <div class="form-group">
                <label>Last name:</label>
                <input class="form-control" type="text" placeholder="last name" @bind-value="lastName" />
            </div>
            <div class="form-group">
                <label>Username:</label>
                <input class="form-control" type="text" placeholder="user name" @bind-value="username" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <input class="form-control" type="password" placeholder="password" @bind-value="password" />
            </div>
        </div>
        <div style="color:red">@errorMessage</div>

        <button class="btn btn-light"><a href="" @onclick="RegisterUser">
                Register
            </a>
        </button>
    </NotAuthorized>
</AuthorizeView>
@code {
    [Required]
    [MinLength(4)]
    private string username;
    [Required]
    [MinLength(4)] 
    private string password;
    [Required(ErrorMessage = "Enter your name.")]
    [MinLength(2)]
    private string firstName;
    [Required]
    [MinLength(2)]
    private string lastName;
    public string errorMessage;

    public async Task RegisterUser()
    {
        User user = new User();
        user.Username = username;
        user.LastName = lastName;
        user.FirstName = firstName;
        user.Password = password;
        user.Role = "User";
        IList<User> uss = await UserService.GetUsersAsync();
        User us = uss.FirstOrDefault(f => f.Username.Equals(username));
        if (us != null)
        {
            errorMessage = "User already exists";
        }
        else
        {
            await UserService.AddUserAsync(user);
            errorMessage = "";
            try
            {
                await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).ValidateLogin(username, password);
                username = "";
                password = "";
            }
            catch (Exception e)
            {
                errorMessage = e.Message;
            }
            NavigationManager.NavigateTo("/");
        }
    }
}