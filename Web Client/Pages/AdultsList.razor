@page "/adults"
@using Data
@using Model
@using Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFamilyService FamilyService
@inject NavigationManager NavigationManager

<h1>Adults</h1>
<AuthorizeView>
<p>Filter by first name: <input class="input-group-text" type="text" @oninput="@((arg) => FilterByFirstName(arg))" /></p>
<p>Filter by last name: <input class="input-group-text" type="text" @oninput="@((arg) => FilterByLastName(arg))" /></p>

@if (filteredByName == null)
{
    <p> <em>Loading...</em> </p>
}
else if (!filteredByName.Any())
{
    <p> <em>No Adults exist. Please
            add some.</em> </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>FirstName</th>
                <th>LastName</th>
                <th>HairColor</th>
                <th>EyeColor</th>
                <th>Age</th>
                <th>Weight</th>
                <th>Height</th>
                <th>Sex</th>
                <th>Job</th>
                <th>Salary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in filteredByName)
            {
                <tr>
                    <td>@item?.Id</td>
                    <td>@item?.FirstName</td>
                    <td>@item?.LastName</td>
                    <td>@item?.HairColor</td>
                    <td>@item?.EyeColor</td>
                    <td>@item?.Age</td>
                    <td>@item?.Weight</td>
                    <td>@item?.Height</td>
                    <td>@item?.Sex</td>
                    <td>@item?.JobTitle.JobTitle</td>
                    <td>@item?.JobTitle.Salary</td>
                </tr>
            }
        </tbody>
    </table>
}
</AuthorizeView>
@code{
    IList<Adult> adults {get;set;}
    IList<Adult> filteredByName {get;set;}
        private bool filteredByFirstName {get;set;}
        private bool filteredByLastName {get;set;}
        private string filterFN {get;set;}
        private string filterLN {get;set;}

    protected override async Task OnInitializedAsync()
    {
        adults = await FamilyService.GetAdultsAsync();
        filteredByName = adults;
        filteredByFirstName = false;
        filteredByLastName = false;
        filterFN ="";
        filterLN ="";
    }

    private async Task FilterByFirstName(ChangeEventArgs changeEventArgs)
    {
        filteredByFirstName = true;
        filterFN = changeEventArgs.Value.ToString();
        if(filterFN.Equals("") || filterFN.Equals(" "))
        {
            filteredByName = adults;
            
        }
        ExecuteFilters();
    }

    private async Task FilterByLastName(ChangeEventArgs changeEventArgs)
    {
        filteredByLastName = true;
        filterLN = changeEventArgs.Value.ToString();
        if(filterLN.Equals("") || filterLN.Equals(" "))
        {
            filteredByName = adults;
            
        }
        ExecuteFilters();
    }

    private async Task ExecuteFilters()
    {
        if(filterFN!=null && filterLN!=null)
        {
        filteredByName = adults.Where(t => (t.FirstName.Contains(filterFN) && filteredByFirstName || !filteredByFirstName)
        && (filteredByLastName && t.LastName.Contains(filterLN) || !filteredByLastName)).ToList();
        } else if(filterFN!=null && filterLN == null)
        {
            filteredByName = adults.Where(t => (t.FirstName.Contains(filterFN) && filteredByFirstName || !filteredByFirstName)).ToList();
        } else if(filterFN==null && filterLN!=null)
        {
            filteredByName = adults.Where(t => (filteredByLastName && t.LastName.Contains(filterLN) || !filteredByLastName)).ToList();
        }
    }

    /*private async Task Edit(int Id)
    {
        NavigationManager.NavigateTo($"/Edit/{Id}");
    }
    private async Task Remove(int Id)
    {
        Adult toRemove = adults.First(ad => ad.Id == Id);
        adults.Remove(toRemove);
        filteredByName.Remove(toRemove);
        await AdultService.RemoveAdultAsync(toRemove);
    }*/
}